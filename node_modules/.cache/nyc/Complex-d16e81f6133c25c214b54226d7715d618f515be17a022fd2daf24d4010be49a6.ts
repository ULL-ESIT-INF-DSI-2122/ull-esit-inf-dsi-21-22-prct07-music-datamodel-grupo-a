"use strict";function cov_2l0lh0s06r(){var path="/home/usuario/p6/src/modificacion/Complex.ts";var hash="48e5fc5de7bf4136d6968ca9614ef34559a911bd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/p6/src/modificacion/Complex.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:25}},"2":{start:{line:14,column:8},end:{line:14,column:19}},"3":{start:{line:15,column:8},end:{line:15,column:19}},"4":{start:{line:22,column:8},end:{line:22,column:22}},"5":{start:{line:29,column:8},end:{line:29,column:22}},"6":{start:{line:35,column:8},end:{line:35,column:51}},"7":{start:{line:43,column:8},end:{line:43,column:77}},"8":{start:{line:51,column:8},end:{line:51,column:89}},"9":{start:{line:59,column:21},end:{line:59,column:22}},"10":{start:{line:60,column:22},end:{line:60,column:23}},"11":{start:{line:61,column:8},end:{line:61,column:46}},"12":{start:{line:62,column:8},end:{line:62,column:57}},"13":{start:{line:63,column:8},end:{line:63,column:78}},"14":{start:{line:64,column:8},end:{line:64,column:44}},"15":{start:{line:72,column:26},end:{line:72,column:85}},"16":{start:{line:73,column:22},end:{line:73,column:61}},"17":{start:{line:74,column:24},end:{line:74,column:50}},"18":{start:{line:75,column:8},end:{line:75,column:83}},"19":{start:{line:78,column:0},end:{line:78,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:22},end:{line:16,column:5}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:11},end:{line:23,column:5}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:11},end:{line:30,column:5}},line:28},"3":{name:"(anonymous_3)",decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:12},end:{line:36,column:5}},line:34},"4":{name:"(anonymous_4)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:17},end:{line:44,column:5}},line:42},"5":{name:"(anonymous_5)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:29},end:{line:52,column:5}},line:50},"6":{name:"(anonymous_6)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:27},end:{line:65,column:5}},line:58},"7":{name:"(anonymous_7)",decl:{start:{line:71,column:4},end:{line:71,column:5}},loc:{start:{line:71,column:23},end:{line:76,column:5}},line:71}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{},inputSourceMap:{version:3,file:"/home/usuario/p6/src/modificacion/Complex.ts",sources:["/home/usuario/p6/src/modificacion/Complex.ts"],names:[],mappings:";;;AACA;;GAEG;AACH,MAAa,OAAO;IAChB;;;;OAIG;IACH,YAAoB,CAAQ,EAAU,CAAQ;QAA1B,MAAC,GAAD,CAAC,CAAO;QAAU,MAAC,GAAD,CAAC,CAAO;IAE9C,CAAC;IAED;;;OAGG;IACH,IAAI;QACA,OAAO,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,IAAI;QACA,OAAO,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,KAAK;QACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,OAAgB;QAChB,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,aAAsB;QAC5B,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,aAAa,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,GAAG,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;IACrF,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,YAAqB;QAC1B,IAAI,MAAM,GAAU,CAAC,CAAC;QACtB,IAAI,OAAO,GAAU,CAAC,CAAC;QACvB,MAAM,GAAG,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QACtC,MAAM,GAAE,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;QAChD,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QACtE,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,UAAkB;QACrB,IAAI,WAAW,GAAW,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACtF,IAAI,OAAO,GAAW,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC;QAC9D,IAAI,SAAS,GAAW,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACnD,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC;IAC/E,CAAC;CAEJ;AA7ED,0BA6EC",sourcesContent:["import {Arithmeticable} from './Arithmeticable';\n/**\n * Clase que implementa la interfaz Arithmeticable para representar los numeros complejos\n */\nexport class Complex implements Arithmeticable<Complex>{\n    /**\n     * Constructor de la clase\n     * @param a Es el primer t\xE9rmino del numero complejo\n     * @param b Es el t\xE9rmino que multiplica a la i\n     */\n    constructor(private a:number, private b:number){\n\n    }\n\n    /**\n     * Getter para el primer t\xE9rmino\n     * @return Retorna el valor del primer t\xE9rmino\n     */\n    getA(){\n        return this.a;\n    }\n\n    /**\n     * Getter para el segundo t\xE9rmino\n     * @return Retorna el valor del segundo t\xE9rmino\n     */\n    getB(){\n        return this.b;\n    }\n\n    /**\n     * Imprime el coplejo por pantalla en formatos de numero complejo a + bi\n     */\n    print(){\n        console.log(this.a + \" + \" + this.b + \"i\");\n    }\n\n    /**\n     * Realiza la suma de numeros complejos\n     * @param addItem Es el numero complejo que se le quiere sumar\n     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la suma\n     */\n    add(addItem: Complex):Complex{\n        return new Complex(this.a + addItem.getA(), this.b + addItem.getB());\n    }\n\n    /**\n     * Realiza la resta de numeros complejos\n     * @param substractItem Es el numero complejo que se le quiere restar\n     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la resta\n     */\n    substract(substractItem: Complex): Complex {\n        return new Complex(this.a - substractItem.getA(), this.b - substractItem.getB());\n    }\n\n    /**\n     * Realiza la multiplicaci\xF3n de numeros complejos\n     * @param multiplyItem Es el numero complejo que se le quiere multiplicar\n     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la multiplicacion\n     */\n    multiply(multiplyItem: Complex): Complex{\n        let primer:number = 0;\n        let segundo:number = 0;\n        primer = this.a * multiplyItem.getA();\n        primer =primer - (this.b * multiplyItem.getB());\n        segundo = this.a * multiplyItem.getB() + this.b * multiplyItem.getA();\n        return new Complex(primer, segundo);\n    }\n\n    /**\n     * Realiza la divisi\xF3n de numeros complejos\n     * @param divideItem Es el numero complejo que se le quiere dividir\n     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la division\n     */\n    divide(divideItem:Complex): Complex {\n        let factorComun:Complex = new Complex(divideItem.getA(), Math.abs(divideItem.getB()));\n        let divisor: number = divideItem.multiply(factorComun).getA();\n        let dividendo:Complex = this.multiply(factorComun);\n        return new Complex(dividendo.getA() / divisor, dividendo.getB() / divisor); \n    }\n\n}"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"48e5fc5de7bf4136d6968ca9614ef34559a911bd"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2l0lh0s06r=function(){return actualCoverage;};}return actualCoverage;}cov_2l0lh0s06r();cov_2l0lh0s06r().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2l0lh0s06r().s[1]++;exports.Complex=void 0;/**
 * Clase que implementa la interfaz Arithmeticable para representar los numeros complejos
 */class Complex{/**
     * Constructor de la clase
     * @param a Es el primer término del numero complejo
     * @param b Es el término que multiplica a la i
     */constructor(a,b){cov_2l0lh0s06r().f[0]++;cov_2l0lh0s06r().s[2]++;this.a=a;cov_2l0lh0s06r().s[3]++;this.b=b;}/**
     * Getter para el primer término
     * @return Retorna el valor del primer término
     */getA(){cov_2l0lh0s06r().f[1]++;cov_2l0lh0s06r().s[4]++;return this.a;}/**
     * Getter para el segundo término
     * @return Retorna el valor del segundo término
     */getB(){cov_2l0lh0s06r().f[2]++;cov_2l0lh0s06r().s[5]++;return this.b;}/**
     * Imprime el coplejo por pantalla en formatos de numero complejo a + bi
     */print(){cov_2l0lh0s06r().f[3]++;cov_2l0lh0s06r().s[6]++;console.log(this.a+" + "+this.b+"i");}/**
     * Realiza la suma de numeros complejos
     * @param addItem Es el numero complejo que se le quiere sumar
     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la suma
     */add(addItem){cov_2l0lh0s06r().f[4]++;cov_2l0lh0s06r().s[7]++;return new Complex(this.a+addItem.getA(),this.b+addItem.getB());}/**
     * Realiza la resta de numeros complejos
     * @param substractItem Es el numero complejo que se le quiere restar
     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la resta
     */substract(substractItem){cov_2l0lh0s06r().f[5]++;cov_2l0lh0s06r().s[8]++;return new Complex(this.a-substractItem.getA(),this.b-substractItem.getB());}/**
     * Realiza la multiplicación de numeros complejos
     * @param multiplyItem Es el numero complejo que se le quiere multiplicar
     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la multiplicacion
     */multiply(multiplyItem){cov_2l0lh0s06r().f[6]++;let primer=(cov_2l0lh0s06r().s[9]++,0);let segundo=(cov_2l0lh0s06r().s[10]++,0);cov_2l0lh0s06r().s[11]++;primer=this.a*multiplyItem.getA();cov_2l0lh0s06r().s[12]++;primer=primer-this.b*multiplyItem.getB();cov_2l0lh0s06r().s[13]++;segundo=this.a*multiplyItem.getB()+this.b*multiplyItem.getA();cov_2l0lh0s06r().s[14]++;return new Complex(primer,segundo);}/**
     * Realiza la división de numeros complejos
     * @param divideItem Es el numero complejo que se le quiere dividir
     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la division
     */divide(divideItem){cov_2l0lh0s06r().f[7]++;let factorComun=(cov_2l0lh0s06r().s[15]++,new Complex(divideItem.getA(),Math.abs(divideItem.getB())));let divisor=(cov_2l0lh0s06r().s[16]++,divideItem.multiply(factorComun).getA());let dividendo=(cov_2l0lh0s06r().s[17]++,this.multiply(factorComun));cov_2l0lh0s06r().s[18]++;return new Complex(dividendo.getA()/divisor,dividendo.getB()/divisor);}}cov_2l0lh0s06r().s[19]++;exports.Complex=Complex;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby9wNi9zcmMvbW9kaWZpY2FjaW9uL0NvbXBsZXgudHMiLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vcDYvc3JjL21vZGlmaWNhY2lvbi9Db21wbGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBOztHQUVHO0FBQ0gsTUFBYSxPQUFPO0lBQ2hCOzs7O09BSUc7SUFDSCxZQUFvQixDQUFRLEVBQVUsQ0FBUTtRQUExQixNQUFDLEdBQUQsQ0FBQyxDQUFPO1FBQVUsTUFBQyxHQUFELENBQUMsQ0FBTztJQUU5QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSTtRQUNBLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSTtRQUNBLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsR0FBRyxDQUFDLE9BQWdCO1FBQ2hCLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFNBQVMsQ0FBQyxhQUFzQjtRQUM1QixPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsWUFBcUI7UUFDMUIsSUFBSSxNQUFNLEdBQVUsQ0FBQyxDQUFDO1FBQ3RCLElBQUksT0FBTyxHQUFVLENBQUMsQ0FBQztRQUN2QixNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEMsTUFBTSxHQUFFLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDaEQsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RFLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQWtCO1FBQ3JCLElBQUksV0FBVyxHQUFXLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEYsSUFBSSxPQUFPLEdBQVcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5RCxJQUFJLFNBQVMsR0FBVyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUM7SUFDL0UsQ0FBQztDQUVKO0FBN0VELDBCQTZFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXJpdGhtZXRpY2FibGV9IGZyb20gJy4vQXJpdGhtZXRpY2FibGUnO1xuLyoqXG4gKiBDbGFzZSBxdWUgaW1wbGVtZW50YSBsYSBpbnRlcmZheiBBcml0aG1ldGljYWJsZSBwYXJhIHJlcHJlc2VudGFyIGxvcyBudW1lcm9zIGNvbXBsZWpvc1xuICovXG5leHBvcnQgY2xhc3MgQ29tcGxleCBpbXBsZW1lbnRzIEFyaXRobWV0aWNhYmxlPENvbXBsZXg+e1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGRlIGxhIGNsYXNlXG4gICAgICogQHBhcmFtIGEgRXMgZWwgcHJpbWVyIHTDqXJtaW5vIGRlbCBudW1lcm8gY29tcGxlam9cbiAgICAgKiBAcGFyYW0gYiBFcyBlbCB0w6lybWlubyBxdWUgbXVsdGlwbGljYSBhIGxhIGlcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGE6bnVtYmVyLCBwcml2YXRlIGI6bnVtYmVyKXtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBwYXJhIGVsIHByaW1lciB0w6lybWlub1xuICAgICAqIEByZXR1cm4gUmV0b3JuYSBlbCB2YWxvciBkZWwgcHJpbWVyIHTDqXJtaW5vXG4gICAgICovXG4gICAgZ2V0QSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5hO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciBwYXJhIGVsIHNlZ3VuZG8gdMOpcm1pbm9cbiAgICAgKiBAcmV0dXJuIFJldG9ybmEgZWwgdmFsb3IgZGVsIHNlZ3VuZG8gdMOpcm1pbm9cbiAgICAgKi9cbiAgICBnZXRCKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1wcmltZSBlbCBjb3BsZWpvIHBvciBwYW50YWxsYSBlbiBmb3JtYXRvcyBkZSBudW1lcm8gY29tcGxlam8gYSArIGJpXG4gICAgICovXG4gICAgcHJpbnQoKXtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5hICsgXCIgKyBcIiArIHRoaXMuYiArIFwiaVwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFsaXphIGxhIHN1bWEgZGUgbnVtZXJvcyBjb21wbGVqb3NcbiAgICAgKiBAcGFyYW0gYWRkSXRlbSBFcyBlbCBudW1lcm8gY29tcGxlam8gcXVlIHNlIGxlIHF1aWVyZSBzdW1hclxuICAgICAqIEByZXV0cm4gRGV2dWVsdmUgdW4gb2JqZXRvIGNvbXBsZWpvIGRlIGxhIGNsYXNlIENvbXBsZXggcmVzdWx0YWRvIGRlIGxhIHN1bWFcbiAgICAgKi9cbiAgICBhZGQoYWRkSXRlbTogQ29tcGxleCk6Q29tcGxleHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KHRoaXMuYSArIGFkZEl0ZW0uZ2V0QSgpLCB0aGlzLmIgKyBhZGRJdGVtLmdldEIoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhbGl6YSBsYSByZXN0YSBkZSBudW1lcm9zIGNvbXBsZWpvc1xuICAgICAqIEBwYXJhbSBzdWJzdHJhY3RJdGVtIEVzIGVsIG51bWVybyBjb21wbGVqbyBxdWUgc2UgbGUgcXVpZXJlIHJlc3RhclxuICAgICAqIEByZXV0cm4gRGV2dWVsdmUgdW4gb2JqZXRvIGNvbXBsZWpvIGRlIGxhIGNsYXNlIENvbXBsZXggcmVzdWx0YWRvIGRlIGxhIHJlc3RhXG4gICAgICovXG4gICAgc3Vic3RyYWN0KHN1YnN0cmFjdEl0ZW06IENvbXBsZXgpOiBDb21wbGV4IHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KHRoaXMuYSAtIHN1YnN0cmFjdEl0ZW0uZ2V0QSgpLCB0aGlzLmIgLSBzdWJzdHJhY3RJdGVtLmdldEIoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhbGl6YSBsYSBtdWx0aXBsaWNhY2nDs24gZGUgbnVtZXJvcyBjb21wbGVqb3NcbiAgICAgKiBAcGFyYW0gbXVsdGlwbHlJdGVtIEVzIGVsIG51bWVybyBjb21wbGVqbyBxdWUgc2UgbGUgcXVpZXJlIG11bHRpcGxpY2FyXG4gICAgICogQHJldXRybiBEZXZ1ZWx2ZSB1biBvYmpldG8gY29tcGxlam8gZGUgbGEgY2xhc2UgQ29tcGxleCByZXN1bHRhZG8gZGUgbGEgbXVsdGlwbGljYWNpb25cbiAgICAgKi9cbiAgICBtdWx0aXBseShtdWx0aXBseUl0ZW06IENvbXBsZXgpOiBDb21wbGV4e1xuICAgICAgICBsZXQgcHJpbWVyOm51bWJlciA9IDA7XG4gICAgICAgIGxldCBzZWd1bmRvOm51bWJlciA9IDA7XG4gICAgICAgIHByaW1lciA9IHRoaXMuYSAqIG11bHRpcGx5SXRlbS5nZXRBKCk7XG4gICAgICAgIHByaW1lciA9cHJpbWVyIC0gKHRoaXMuYiAqIG11bHRpcGx5SXRlbS5nZXRCKCkpO1xuICAgICAgICBzZWd1bmRvID0gdGhpcy5hICogbXVsdGlwbHlJdGVtLmdldEIoKSArIHRoaXMuYiAqIG11bHRpcGx5SXRlbS5nZXRBKCk7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcGxleChwcmltZXIsIHNlZ3VuZG8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWxpemEgbGEgZGl2aXNpw7NuIGRlIG51bWVyb3MgY29tcGxlam9zXG4gICAgICogQHBhcmFtIGRpdmlkZUl0ZW0gRXMgZWwgbnVtZXJvIGNvbXBsZWpvIHF1ZSBzZSBsZSBxdWllcmUgZGl2aWRpclxuICAgICAqIEByZXV0cm4gRGV2dWVsdmUgdW4gb2JqZXRvIGNvbXBsZWpvIGRlIGxhIGNsYXNlIENvbXBsZXggcmVzdWx0YWRvIGRlIGxhIGRpdmlzaW9uXG4gICAgICovXG4gICAgZGl2aWRlKGRpdmlkZUl0ZW06Q29tcGxleCk6IENvbXBsZXgge1xuICAgICAgICBsZXQgZmFjdG9yQ29tdW46Q29tcGxleCA9IG5ldyBDb21wbGV4KGRpdmlkZUl0ZW0uZ2V0QSgpLCBNYXRoLmFicyhkaXZpZGVJdGVtLmdldEIoKSkpO1xuICAgICAgICBsZXQgZGl2aXNvcjogbnVtYmVyID0gZGl2aWRlSXRlbS5tdWx0aXBseShmYWN0b3JDb211bikuZ2V0QSgpO1xuICAgICAgICBsZXQgZGl2aWRlbmRvOkNvbXBsZXggPSB0aGlzLm11bHRpcGx5KGZhY3RvckNvbXVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KGRpdmlkZW5kby5nZXRBKCkgLyBkaXZpc29yLCBkaXZpZGVuZG8uZ2V0QigpIC8gZGl2aXNvcik7IFxuICAgIH1cblxufSJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vcDYvc3JjL21vZGlmaWNhY2lvbi9Db21wbGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIrNk9BWUs7Mk5BWEw7O0FBRUcsR0FDSCxLQUFhLENBQUEsT0FBTyxDQUNoQjs7OztBQUlHLE9BQ0gsV0FBQSxDQUFvQixDQUFwQixDQUFzQyxDQUF0QyxDQUE4QyxpREFBMUIsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUEwQix3QkFBUixLQUFBLENBQUEsQ0FBQSxDQUFBLENBRXJDLENBRUQ7OztBQUdHLE9BQ0gsSUFBSSxFQUFBLGlEQUNBLE1BQU8sTUFBSyxDQUFaLENBQ0gsQ0FFRDs7O0FBR0csT0FDSCxJQUFJLEVBQUEsaURBQ0EsTUFBTyxNQUFLLENBQVosQ0FDSCxDQUVEOztBQUVHLE9BQ0gsS0FBSyxFQUFBLGlEQUNELE9BQU8sQ0FBQyxHQUFSLENBQVksS0FBSyxDQUFMLENBQVMsS0FBVCxDQUFpQixLQUFLLENBQXRCLENBQTBCLEdBQXRDLEVBQ0gsQ0FFRDs7OztBQUlHLE9BQ0gsR0FBRyxDQUFDLE9BQUQsQ0FBaUIsaURBQ2hCLE1BQU8sSUFBSSxDQUFBLE9BQUosQ0FBWSxLQUFLLENBQUwsQ0FBUyxPQUFPLENBQUMsSUFBUixFQUFyQixDQUFxQyxLQUFLLENBQUwsQ0FBUyxPQUFPLENBQUMsSUFBUixFQUE5QyxDQUFQLENBQ0gsQ0FFRDs7OztBQUlHLE9BQ0gsU0FBUyxDQUFDLGFBQUQsQ0FBdUIsaURBQzVCLE1BQU8sSUFBSSxDQUFBLE9BQUosQ0FBWSxLQUFLLENBQUwsQ0FBUyxhQUFhLENBQUMsSUFBZCxFQUFyQixDQUEyQyxLQUFLLENBQUwsQ0FBUyxhQUFhLENBQUMsSUFBZCxFQUFwRCxDQUFQLENBQ0gsQ0FFRDs7OztBQUlHLE9BQ0gsUUFBUSxDQUFDLFlBQUQsQ0FBc0IseUJBQzFCLEdBQUksQ0FBQSxNQUFNLDBCQUFVLENBQVYsQ0FBVixDQUNBLEdBQUksQ0FBQSxPQUFPLDJCQUFVLENBQVYsQ0FBWCxDQUYwQix5QkFHMUIsTUFBTSxDQUFHLEtBQUssQ0FBTCxDQUFTLFlBQVksQ0FBQyxJQUFiLEVBQWxCLENBSDBCLHlCQUkxQixNQUFNLENBQUUsTUFBTSxDQUFJLEtBQUssQ0FBTCxDQUFTLFlBQVksQ0FBQyxJQUFiLEVBQTNCLENBSjBCLHlCQUsxQixPQUFPLENBQUcsS0FBSyxDQUFMLENBQVMsWUFBWSxDQUFDLElBQWIsRUFBVCxDQUErQixLQUFLLENBQUwsQ0FBUyxZQUFZLENBQUMsSUFBYixFQUFsRCxDQUwwQix5QkFNMUIsTUFBTyxJQUFJLENBQUEsT0FBSixDQUFZLE1BQVosQ0FBb0IsT0FBcEIsQ0FBUCxDQUNILENBRUQ7Ozs7QUFJRyxPQUNILE1BQU0sQ0FBQyxVQUFELENBQW1CLHlCQUNyQixHQUFJLENBQUEsV0FBVywyQkFBVyxHQUFJLENBQUEsT0FBSixDQUFZLFVBQVUsQ0FBQyxJQUFYLEVBQVosQ0FBK0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxVQUFVLENBQUMsSUFBWCxFQUFULENBQS9CLENBQVgsQ0FBZixDQUNBLEdBQUksQ0FBQSxPQUFPLDJCQUFXLFVBQVUsQ0FBQyxRQUFYLENBQW9CLFdBQXBCLEVBQWlDLElBQWpDLEVBQVgsQ0FBWCxDQUNBLEdBQUksQ0FBQSxTQUFTLDJCQUFXLEtBQUssUUFBTCxDQUFjLFdBQWQsQ0FBWCxDQUFiLENBSHFCLHlCQUlyQixNQUFPLElBQUksQ0FBQSxPQUFKLENBQVksU0FBUyxDQUFDLElBQVYsR0FBbUIsT0FBL0IsQ0FBd0MsU0FBUyxDQUFDLElBQVYsR0FBbUIsT0FBM0QsQ0FBUCxDQUNILENBM0VlLEMseUJBQXBCLE9BQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcml0aG1ldGljYWJsZX0gZnJvbSAnLi9Bcml0aG1ldGljYWJsZSc7XG4vKipcbiAqIENsYXNlIHF1ZSBpbXBsZW1lbnRhIGxhIGludGVyZmF6IEFyaXRobWV0aWNhYmxlIHBhcmEgcmVwcmVzZW50YXIgbG9zIG51bWVyb3MgY29tcGxlam9zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wbGV4IGltcGxlbWVudHMgQXJpdGhtZXRpY2FibGU8Q29tcGxleD57XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZGUgbGEgY2xhc2VcbiAgICAgKiBAcGFyYW0gYSBFcyBlbCBwcmltZXIgdMOpcm1pbm8gZGVsIG51bWVybyBjb21wbGVqb1xuICAgICAqIEBwYXJhbSBiIEVzIGVsIHTDqXJtaW5vIHF1ZSBtdWx0aXBsaWNhIGEgbGEgaVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYTpudW1iZXIsIHByaXZhdGUgYjpudW1iZXIpe1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHBhcmEgZWwgcHJpbWVyIHTDqXJtaW5vXG4gICAgICogQHJldHVybiBSZXRvcm5hIGVsIHZhbG9yIGRlbCBwcmltZXIgdMOpcm1pbm9cbiAgICAgKi9cbiAgICBnZXRBKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0dGVyIHBhcmEgZWwgc2VndW5kbyB0w6lybWlub1xuICAgICAqIEByZXR1cm4gUmV0b3JuYSBlbCB2YWxvciBkZWwgc2VndW5kbyB0w6lybWlub1xuICAgICAqL1xuICAgIGdldEIoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuYjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbXByaW1lIGVsIGNvcGxlam8gcG9yIHBhbnRhbGxhIGVuIGZvcm1hdG9zIGRlIG51bWVybyBjb21wbGVqbyBhICsgYmlcbiAgICAgKi9cbiAgICBwcmludCgpe1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmEgKyBcIiArIFwiICsgdGhpcy5iICsgXCJpXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWxpemEgbGEgc3VtYSBkZSBudW1lcm9zIGNvbXBsZWpvc1xuICAgICAqIEBwYXJhbSBhZGRJdGVtIEVzIGVsIG51bWVybyBjb21wbGVqbyBxdWUgc2UgbGUgcXVpZXJlIHN1bWFyXG4gICAgICogQHJldXRybiBEZXZ1ZWx2ZSB1biBvYmpldG8gY29tcGxlam8gZGUgbGEgY2xhc2UgQ29tcGxleCByZXN1bHRhZG8gZGUgbGEgc3VtYVxuICAgICAqL1xuICAgIGFkZChhZGRJdGVtOiBDb21wbGV4KTpDb21wbGV4e1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgodGhpcy5hICsgYWRkSXRlbS5nZXRBKCksIHRoaXMuYiArIGFkZEl0ZW0uZ2V0QigpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFsaXphIGxhIHJlc3RhIGRlIG51bWVyb3MgY29tcGxlam9zXG4gICAgICogQHBhcmFtIHN1YnN0cmFjdEl0ZW0gRXMgZWwgbnVtZXJvIGNvbXBsZWpvIHF1ZSBzZSBsZSBxdWllcmUgcmVzdGFyXG4gICAgICogQHJldXRybiBEZXZ1ZWx2ZSB1biBvYmpldG8gY29tcGxlam8gZGUgbGEgY2xhc2UgQ29tcGxleCByZXN1bHRhZG8gZGUgbGEgcmVzdGFcbiAgICAgKi9cbiAgICBzdWJzdHJhY3Qoc3Vic3RyYWN0SXRlbTogQ29tcGxleCk6IENvbXBsZXgge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgodGhpcy5hIC0gc3Vic3RyYWN0SXRlbS5nZXRBKCksIHRoaXMuYiAtIHN1YnN0cmFjdEl0ZW0uZ2V0QigpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFsaXphIGxhIG11bHRpcGxpY2FjacOzbiBkZSBudW1lcm9zIGNvbXBsZWpvc1xuICAgICAqIEBwYXJhbSBtdWx0aXBseUl0ZW0gRXMgZWwgbnVtZXJvIGNvbXBsZWpvIHF1ZSBzZSBsZSBxdWllcmUgbXVsdGlwbGljYXJcbiAgICAgKiBAcmV1dHJuIERldnVlbHZlIHVuIG9iamV0byBjb21wbGVqbyBkZSBsYSBjbGFzZSBDb21wbGV4IHJlc3VsdGFkbyBkZSBsYSBtdWx0aXBsaWNhY2lvblxuICAgICAqL1xuICAgIG11bHRpcGx5KG11bHRpcGx5SXRlbTogQ29tcGxleCk6IENvbXBsZXh7XG4gICAgICAgIGxldCBwcmltZXI6bnVtYmVyID0gMDtcbiAgICAgICAgbGV0IHNlZ3VuZG86bnVtYmVyID0gMDtcbiAgICAgICAgcHJpbWVyID0gdGhpcy5hICogbXVsdGlwbHlJdGVtLmdldEEoKTtcbiAgICAgICAgcHJpbWVyID1wcmltZXIgLSAodGhpcy5iICogbXVsdGlwbHlJdGVtLmdldEIoKSk7XG4gICAgICAgIHNlZ3VuZG8gPSB0aGlzLmEgKiBtdWx0aXBseUl0ZW0uZ2V0QigpICsgdGhpcy5iICogbXVsdGlwbHlJdGVtLmdldEEoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KHByaW1lciwgc2VndW5kbyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhbGl6YSBsYSBkaXZpc2nDs24gZGUgbnVtZXJvcyBjb21wbGVqb3NcbiAgICAgKiBAcGFyYW0gZGl2aWRlSXRlbSBFcyBlbCBudW1lcm8gY29tcGxlam8gcXVlIHNlIGxlIHF1aWVyZSBkaXZpZGlyXG4gICAgICogQHJldXRybiBEZXZ1ZWx2ZSB1biBvYmpldG8gY29tcGxlam8gZGUgbGEgY2xhc2UgQ29tcGxleCByZXN1bHRhZG8gZGUgbGEgZGl2aXNpb25cbiAgICAgKi9cbiAgICBkaXZpZGUoZGl2aWRlSXRlbTpDb21wbGV4KTogQ29tcGxleCB7XG4gICAgICAgIGxldCBmYWN0b3JDb211bjpDb21wbGV4ID0gbmV3IENvbXBsZXgoZGl2aWRlSXRlbS5nZXRBKCksIE1hdGguYWJzKGRpdmlkZUl0ZW0uZ2V0QigpKSk7XG4gICAgICAgIGxldCBkaXZpc29yOiBudW1iZXIgPSBkaXZpZGVJdGVtLm11bHRpcGx5KGZhY3RvckNvbXVuKS5nZXRBKCk7XG4gICAgICAgIGxldCBkaXZpZGVuZG86Q29tcGxleCA9IHRoaXMubXVsdGlwbHkoZmFjdG9yQ29tdW4pO1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgoZGl2aWRlbmRvLmdldEEoKSAvIGRpdmlzb3IsIGRpdmlkZW5kby5nZXRCKCkgLyBkaXZpc29yKTsgXG4gICAgfVxuXG59Il19