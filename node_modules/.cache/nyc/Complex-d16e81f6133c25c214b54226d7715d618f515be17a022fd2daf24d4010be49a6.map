{"version":3,"file":"/home/usuario/p6/src/modificacion/Complex.ts","sources":["/home/usuario/p6/src/modificacion/Complex.ts"],"names":[],"mappings":";;;AACA;;GAEG;AACH,MAAa,OAAO;IAChB;;;;OAIG;IACH,YAAoB,CAAQ,EAAU,CAAQ;QAA1B,MAAC,GAAD,CAAC,CAAO;QAAU,MAAC,GAAD,CAAC,CAAO;IAE9C,CAAC;IAED;;;OAGG;IACH,IAAI;QACA,OAAO,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,IAAI;QACA,OAAO,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,KAAK;QACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,OAAgB;QAChB,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,aAAsB;QAC5B,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,aAAa,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,GAAG,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;IACrF,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,YAAqB;QAC1B,IAAI,MAAM,GAAU,CAAC,CAAC;QACtB,IAAI,OAAO,GAAU,CAAC,CAAC;QACvB,MAAM,GAAG,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QACtC,MAAM,GAAE,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;QAChD,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QACtE,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,UAAkB;QACrB,IAAI,WAAW,GAAW,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACtF,IAAI,OAAO,GAAW,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC;QAC9D,IAAI,SAAS,GAAW,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACnD,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC;IAC/E,CAAC;CAEJ;AA7ED,0BA6EC","sourcesContent":["import {Arithmeticable} from './Arithmeticable';\n/**\n * Clase que implementa la interfaz Arithmeticable para representar los numeros complejos\n */\nexport class Complex implements Arithmeticable<Complex>{\n    /**\n     * Constructor de la clase\n     * @param a Es el primer término del numero complejo\n     * @param b Es el término que multiplica a la i\n     */\n    constructor(private a:number, private b:number){\n\n    }\n\n    /**\n     * Getter para el primer término\n     * @return Retorna el valor del primer término\n     */\n    getA(){\n        return this.a;\n    }\n\n    /**\n     * Getter para el segundo término\n     * @return Retorna el valor del segundo término\n     */\n    getB(){\n        return this.b;\n    }\n\n    /**\n     * Imprime el coplejo por pantalla en formatos de numero complejo a + bi\n     */\n    print(){\n        console.log(this.a + \" + \" + this.b + \"i\");\n    }\n\n    /**\n     * Realiza la suma de numeros complejos\n     * @param addItem Es el numero complejo que se le quiere sumar\n     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la suma\n     */\n    add(addItem: Complex):Complex{\n        return new Complex(this.a + addItem.getA(), this.b + addItem.getB());\n    }\n\n    /**\n     * Realiza la resta de numeros complejos\n     * @param substractItem Es el numero complejo que se le quiere restar\n     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la resta\n     */\n    substract(substractItem: Complex): Complex {\n        return new Complex(this.a - substractItem.getA(), this.b - substractItem.getB());\n    }\n\n    /**\n     * Realiza la multiplicación de numeros complejos\n     * @param multiplyItem Es el numero complejo que se le quiere multiplicar\n     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la multiplicacion\n     */\n    multiply(multiplyItem: Complex): Complex{\n        let primer:number = 0;\n        let segundo:number = 0;\n        primer = this.a * multiplyItem.getA();\n        primer =primer - (this.b * multiplyItem.getB());\n        segundo = this.a * multiplyItem.getB() + this.b * multiplyItem.getA();\n        return new Complex(primer, segundo);\n    }\n\n    /**\n     * Realiza la división de numeros complejos\n     * @param divideItem Es el numero complejo que se le quiere dividir\n     * @reutrn Devuelve un objeto complejo de la clase Complex resultado de la division\n     */\n    divide(divideItem:Complex): Complex {\n        let factorComun:Complex = new Complex(divideItem.getA(), Math.abs(divideItem.getB()));\n        let divisor: number = divideItem.multiply(factorComun).getA();\n        let dividendo:Complex = this.multiply(factorComun);\n        return new Complex(dividendo.getA() / divisor, dividendo.getB() / divisor); \n    }\n\n}"]}